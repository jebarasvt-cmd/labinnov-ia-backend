from flask import Flask, request, jsonify
from flask_cors import CORS
import json
import os
import numpy as np
from google import generativeai as genai
import re

app = Flask(__name__)
CORS(app)

# ------------------------
# Config Gemini
# ------------------------
genai.configure(api_key=os.environ.get("GEMINI_API_KEY"))

# ------------------------
# Config stockage
# ------------------------
config_data = {
    "api_key": None,
    "tps_file_path": None,
    "qrs_file_path": None
}

QRS_VECTORS_PATH = "/data/qrs_vectors.json"

# ======================
# UTILITAIRES
# ======================
def load_json(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

def save_json(file_path, data):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_gemini_embedding(text):
    model = "models/embedding-001"
    result = genai.embed_content(model=model, content=text)
    return result["embedding"]

def cosine_similarity(vec1, vec2):
    v1, v2 = np.array(vec1), np.array(vec2)
    return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))

def prepare_qrs_embeddings():
    qrs_data = load_json(config_data["qrs_file_path"])
    if not qrs_data:
        return
    qrs_vectors = []
    for item in qrs_data:
        vec = get_gemini_embedding(item["question"])
        qrs_vectors.append({
            "question": item["question"],
            "r√©ponse": item["r√©ponse"],
            "embedding": vec
        })
    save_json(QRS_VECTORS_PATH, qrs_vectors)

def find_best_qr_semantic(question):
    qrs_vectors = load_json(QRS_VECTORS_PATH)
    if not qrs_vectors:
        return None
    question_vec = get_gemini_embedding(question)
    best_match = None
    best_score = 0
    for item in qrs_vectors:
        score = cosine_similarity(question_vec, item["embedding"])
        if score > best_score:
            best_score = score
            best_match = item
    return best_match if best_score >= 0.80 else None

def reformulate_qr_answer(question, original_answer):
    prompt = f"""
    Tu es LabInnov IA, un assistant √©ducatif en Sciences de la Vie et de la Terre (SVT).

    On t‚Äôa fourni une question d'√©l√®ve et une r√©ponse brute issue d'une base de donn√©es √©ducative.

    üéØ Ta mission :
    - Reformuler la r√©ponse pour qu'elle soit claire, p√©dagogique et adapt√©e √† un √©l√®ve de niveau secondaire.
    - Expliquer le concept avec des phrases simples mais scientifiques.
    - Si n√©cessaire, ajouter un exemple ou une pr√©cision utile √† la compr√©hension.
    - √âviter toute formulation trop technique sans explication.
    - Ne pas ajouter d'informations non v√©rifi√©es.

    ‚ö†Ô∏è Format attendu :
    R√©ponse reformul√©e directement, sans mentionner que c‚Äôest une reformulation.

    Question :
    {question}

    R√©ponse initiale :
    {original_answer}
    """
    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(prompt)
    return response.text

# ======================
# INIT ‚Äî upload fichiers + embeddings QRS
# ======================
@app.route("/init", methods=["POST"])
def init():
    try:
        tps_file = request.files.get("tps_file")
        qrs_file = request.files.get("qrs_file")

        if not tps_file:
            return jsonify({"error": "Fichier TPs requis"}), 400

        os.makedirs("/data", exist_ok=True)

        # --- Sauvegarde TPs ---
        tps_path = os.path.join("/data", "tps.json")
        tps_file.save(tps_path)
        config_data["tps_file_path"] = tps_path
        print(f"‚úÖ Fichier TPs enregistr√© : {tps_path} ({os.path.getsize(tps_path)/1024:.2f} Ko)")

        # --- Sauvegarde QRs ---
        if qrs_file:
            qrs_path = os.path.join("/data", "qrs.json")
            qrs_file.save(qrs_path)
            config_data["qrs_file_path"] = qrs_path
            print(f"‚úÖ Fichier QRs enregistr√© : {qrs_path} ({os.path.getsize(qrs_path)/1024:.2f} Ko)")

            # G√©n√©ration embeddings QRS
            prepare_qrs_embeddings()
            print("‚úÖ Embeddings QRS g√©n√©r√©s avec succ√®s")

        # Retourne les infos comme /status
        return jsonify({
            "message": "Initialisation r√©ussie",
            "status": "ready",
            "files": status().json
        }), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500
    
# ======================
# STATUS ‚Äî √©tat d√©taill√©
# ======================
@app.route("/status", methods=["GET"])
def status():
    status_info = {}

    def add_file_info(file_key, file_path):
        if file_path and os.path.exists(file_path):
            data = load_json(file_path)
            status_info[file_key] = {
                "present": True,
                "entries": len(data) if isinstance(data, list) else 1,
                "size_kb": round(os.path.getsize(file_path) / 1024, 2)
            }
        else:
            status_info[file_key] = {"present": False}

    # tps.json
    add_file_info("tps.json", config_data.get("tps_file_path"))

    # qrs.json
    add_file_info("qrs.json", config_data.get("qrs_file_path"))

    # qrs_vectors.json
    add_file_info("qrs_vectors.json", QRS_VECTORS_PATH)

    return jsonify(status_info)

# ======================
# üîç Debug - Lister fichiers persistants
# ======================
@app.route("/debug-files", methods=["GET"])
def debug_files():
    try:
        files_list = []
        data_path = "/data"
        if os.path.exists(data_path):
            for file_name in os.listdir(data_path):
                file_path = os.path.join(data_path, file_name)
                if os.path.isfile(file_path):
                    size_kb = os.path.getsize(file_path) / 1024
                    files_list.append({
                        "name": file_name,
                        "size_kb": round(size_kb, 2)
                    })
        return jsonify({
            "files": files_list,
            "tps_file_path": config_data.get("tps_file_path"),
            "qrs_file_path": config_data.get("qrs_file_path")
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ======================
# 3Ô∏è‚É£ ASK ‚Äî R√©pondre √† l‚Äô√©l√®ve
# ======================
@app.route("/ask", methods=["POST"])
def ask():
    try:
        question = request.json.get("question", "").strip()

        api_key = os.environ.get("GEMINI_API_KEY")
        if not api_key:
            return jsonify({"error": "Cl√© API manquante"}), 500

        genai.configure(api_key=api_key)

        # 1Ô∏è‚É£ V√©rifier QRs par recherche s√©mantique
        match = None
        if config_data["qrs_file_path"] and os.path.exists(config_data["qrs_file_path"]):
            match = find_best_qr_semantic(question)
            if match:
                reformulated = reformulate_qr_answer(question, match["r√©ponse"])
                return jsonify({"source": "qrs", "answer": reformulated})

        # 2Ô∏è‚É£ Sinon ‚Üí TP
        if config_data["tps_file_path"] and os.path.exists(config_data["tps_file_path"]):
            with open(config_data["tps_file_path"], "r", encoding="utf-8") as f:
                tps_content = f.read()

            model = genai.GenerativeModel("gemini-1.5-flash")
            prompt = f"""
            Tu es LabInnov IA, un assistant √©ducatif en Sciences de la Vie et de la Terre (SVT).
            On t‚Äôa fourni un extrait de base de donn√©es JSON d√©crivant un TP.

            Ta mission :
            - Transformer ces donn√©es brutes en un protocole exp√©rimental clair, p√©dagogique et d√©taill√©.
            - Reformuler chaque section pour qu‚Äôelle soit compr√©hensible par un √©l√®ve.
            - D√©velopper les √©tapes avec des phrases compl√®tes qui expliquent le pourquoi et le comment.
            - Ajouter des consignes de s√©curit√© ou de bonnes pratiques si pertinentes.
            - Utiliser un langage simple mais scientifique.
            - Ne jamais recopier mot pour mot le JSON, mais t'en inspirer.

            ‚ö†Ô∏è Format Markdown obligatoire :
            **Titre :** (reprendre et reformuler le champ "titre")

            **Objectif :** (d√©velopper le champ "objectif" en expliquant l‚Äôimportance de ce TP)

            **Pr√©requis :**
            - (reformuler chaque pr√©requis en phrase compl√®te)

            **Mat√©riel :**
            - (lister le mat√©riel, ajouter la fonction ou l‚Äôusage de chaque √©l√©ment entre parenth√®ses)

            **Proc√©dure exp√©rimentale :**
            1. (reprendre chaque √©tape et la d√©velopper en une ou deux phrases compl√®tes, expliquer le but)
            2. ...
            3. ...

            **R√©sultats attendus :**
            - (expliquer clairement ce que l‚Äô√©l√®ve doit observer et ce que cela prouve)

            ‚ö†Ô∏è R√®gles :
            - Minimum 2 phrases compl√®tes par √©tape.
            - Pr√©sentation structur√©e avec titres, listes √† puces et num√©ros.
            - Ne pas √©crire "Protocole exp√©rimental".
            - Respecter la mise en forme Markdown.
            - Toujours commencer par **Titre :**.

            Question de l‚Äô√©l√®ve :
            {question}

            Donn√©es disponibles (JSON) :
            {tps_content}
            """
            response = model.generate_content(prompt)
            if not response or not hasattr(response, "text") or not response.text:
                return jsonify({"error": "R√©ponse vide de Gemini"}), 500

            response_text = re.sub(r"^\**\s*protocole\s+exp√©rimental\s*\**\s*\n*", "", response.text.strip(), flags=re.IGNORECASE)
            final_answer = response_text
            return jsonify({"source": "tps", "answer": final_answer})

        return jsonify({"source": "none", "answer": "Aucune donn√©e disponible."})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ======================
# 4Ô∏è‚É£ Home test
# ======================
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ LabInnov IA Backend est en ligne sur Render"

# ======================
# Recharge fichiers si d√©j√† pr√©sents
# ======================
if os.path.exists("/data/tps.json"):
    config_data["tps_file_path"] = "/data/tps.json"
    print("‚úÖ Fichier TPs recharg√© :", config_data["tps_file_path"])

if os.path.exists("/data/qrs.json"):
    config_data["qrs_file_path"] = "/data/qrs.json"
    print("‚úÖ Fichier QRs recharg√© :", config_data["qrs_file_path"])
    prepare_qrs_embeddings()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
